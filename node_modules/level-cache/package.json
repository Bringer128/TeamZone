{
  "name": "level-cache",
  "version": "0.1.0",
  "description": "An in memory cache on top of leveldb",
  "keywords": [],
  "author": {
    "name": "Raynos",
    "email": "raynos2@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/Raynos/level-cache.git"
  },
  "main": "index",
  "homepage": "https://github.com/Raynos/level-cache",
  "contributors": [
    {
      "name": "Jake Verbaten"
    }
  ],
  "bugs": {
    "url": "https://github.com/Raynos/level-cache/issues",
    "email": "raynos2@gmail.com"
  },
  "dependencies": {
    "level-encoding": "~0.1.0",
    "level-write-stream": "~0.1.0",
    "xtend": "~1.0.3",
    "lru-cache": "~2.1.0",
    "read-stream": "~0.4.8"
  },
  "devDependencies": {
    "tap": "~0.3.1",
    "levelidb": "~0.2.3",
    "node-uuid": "~1.4.0",
    "write-stream": "~0.4.3"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/Raynos/level-cache/raw/master/LICENSE"
    }
  ],
  "scripts": {
    "test": "tap --stderr --tap ./test"
  },
  "readme": "# level-cache\n\nAn in memory cache on top of leveldb\n\n## Example\n\nExact same API as [`levelidb`][1] and [`levelup`][2].\n\nlevel-cache is one of two things. Either it's a complete in\n    memory copy of the levelup API or it's a cache in front of\n    leveldb.\n\n```js\nvar level = require(\"level-cache\")\n\nvar db = level()\n// in memory db\n```\n\n```js\nvar level = require(\"level-cache\")\n    , levelup = require(\"levelidb\")\n\nvar db = level(levelup(...))\n// cache\n```\n\n`level-cache` uses `lru-cache` internally and you can pass in\n    options to configure the internal cache through the API\n\n```js\nvar level = require(\"level-cache\")\n\nvar db = level(db, {\n    max: 20000\n    , maxAge: 5 * 1000\n})\n```\n\nLevel cache has a synchronious get API if you don't pass a\n    callback. It will return whatever is in the cache.\n\n```js\nvar level = require(\"level-cache\")\n\nvar db = level(real_db, ...)\n\n...\n\nvar value = db.get(\"key\")\n```\n\nLevel cache's asynchronous `get` will hit the cache by default\n    and hit the real database if it doesn't have a value in the\n    cache.\n\nTo get level cache to ignore it's local cache in a get just use\n    the `cache: false` option\n\n```js\nvar level = require(\"level-cache\")\n\nvar db = level(real_db, ...)\n\n...\n\ndb.get(\"key\", { cache: false }, function (err, value) {\n    // from real db\n})\n```\n\nAny callbacks passed to `put`, `del` or `batch` will be passed\n    through to the real leveldb and will come back from the real\n    db.\n\n```\nvar level = require(\"level-cache\")\n\nvar db = level(real_db, ...)\n\ndb.put(key, value)\n// real_db.put is called and `db` will emit an `\"error\"` event\n// if real_db returns an error.\n\ndb.put(key, value, function (err) {\n    // result from real db\n})\n```\n\nIt should be noted that the `readStream()` implementation is\n    currently naive. i.e. if a real db is passed to the cache\n    it will just read from the real db and bypass the cache.\n\nlevel cache only uses the cache with `readStream()` if you don't\n    pass in a real database.\n\n\n## Kitchen sink example\n\n```js\nvar level = require(\"level-cache\")\n    , toArray = require(\"write-stream\").toArray\n    , assert = require(\"assert\")\n\nvar db = level()\n\ndb.put(\"foo\", { hello: \"world\" }, function (err) {\n    if (err) {\n        throw err\n    }\n\n    db.get(\"foo\", function (err, value) {\n        if (err) {\n            throw err\n        }\n\n        assert.equal(value.hello, \"world\")\n\n        console.log(\"value\", value)\n    })\n})\n\nvar ten = makeTen()\n\ndb.batch(ten, function (err) {\n    if (err) {\n        throw err\n    }\n\n    var stream = db.readStream({\n        start: \"batch:\"\n        , end: \"batch;\"\n    })\n\n    stream.pipe(toArray(function (list) {\n        console.log(\"list\", list)\n\n        list.forEach(function (item, index) {\n            assert.equal(item.key, ten[index].key)\n            assert.equal(item.value, ten[index].value)\n        })\n    }))\n\n    var keyStream = db.keyStream({\n        start: \"batch:\"\n        , end: \"batch;\"\n    })\n\n    keyStream.pipe(toArray(function (list) {\n        console.log(\"keys\", list)\n\n        list.forEach(function (item, index) {\n            assert.equal(item, ten[index].key)\n        })\n    }))\n\n    var valueStream = db.valueStream({\n        start: \"batch:\"\n        , end: \"batch;\"\n    })\n\n    valueStream.pipe(toArray(function (list) {\n        list.forEach(function (item, index) {\n            assert.equal(item, ten[index].value)\n        })\n\n        console.log(\"values\", list)\n    }))\n})\n\nvar writable = db.writeStream()\n\nwritable.write({ key: \"write:05\", value: \"5\" })\nwritable.write({ key: \"write:20\", value: \"20\" })\n\nwritable.end()\nwritable.on(\"finish\", function () {\n    console.log(\"finished writing\")\n\n    var readable = db.valueStream({\n        start: \"write:\"\n        , end: \"write;\"\n    })\n\n    readable.pipe(toArray(function (list) {\n        assert.equal(list[0], \"5\")\n        assert.equal(list[1], \"20\")\n        assert.equal(list.length, 2)\n\n        console.log(\"values from writeStream\", list)\n    }))\n})\n\nfunction makeTen() {\n    var list = []\n    for (var i = 0; i < 10; i++) {\n        list.push({\n            type: \"put\"\n            , key: \"batch:\" + i\n            , value: i\n        })\n    }\n    return list\n}\n```\n\n## Installation\n\n`npm install level-cache`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced\n\n  [1]: https://github.com/Raynos/levelidb\n  [2]: https://github.com/rvagg/node-levelup\n",
  "readmeFilename": "README.md",
  "_id": "level-cache@0.1.0",
  "dist": {
    "shasum": "367e586edd8789b8ece7eb1c2c87d90b310d2d02",
    "tarball": "http://registry.npmjs.org/level-cache/-/level-cache-0.1.0.tgz"
  },
  "_npmVersion": "1.1.65",
  "_npmUser": {
    "name": "raynos",
    "email": "raynos2@gmail.com"
  },
  "maintainers": [
    {
      "name": "raynos",
      "email": "raynos2@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "367e586edd8789b8ece7eb1c2c87d90b310d2d02",
  "_from": "level-cache@*",
  "_resolved": "https://registry.npmjs.org/level-cache/-/level-cache-0.1.0.tgz"
}
